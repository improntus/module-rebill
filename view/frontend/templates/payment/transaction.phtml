<?php
/**
 * @author Improntus Dev Team
 * @copyright Copyright (c) 2022 Improntus (http://www.improntus.com/)
 * @package Improntus_Rebill
 */

/**
 * @var $block Transaction
 * @var $escaper Escaper
 */

use Magento\Framework\Escaper;
use Improntus\Rebill\Block\Payment\Transaction;
use Improntus\Rebill\Helper\Config;

$e = $escaper;
$order = $block->getOrder();
$prices = $block->getPrices();
/** @var Config $configHelper */
$configHelper = $this->helper(Config::class);
?>
<h2 class="rebill.payment.transaction.title"><?= $e->escapeHtml(__('Pay with rebill')) ?></h2>
<div id="rebill_elements"></div>
<div class="rebill-errors"></div>

<script>
    require(['jquery', 'rebill'], function ($) {
        let initialization = {
            organization_id: '<?= $e->escapeJs($configHelper->getApiUuid()) ?>',
            api_url: 'https://api.rebill.to/v2',
        }
        let checkout = new Rebill.PhantomSDK(initialization);

        checkout.setCustomer({
            firstName: "<?= $e->escapeJs($order->getCustomerFirstname()) ?>",
            lastName: "<?= $e->escapeJs($order->getCustomerLastname()) ?>",
            email: '<?= $e->escapeJs($order->getCustomerEmail()) ?>',
            phone: {
                countryCode: "00",
                areaCode: "00",
                number: "<?= $e->escapeJs($order->getBillingAddress()->getTelephone()) ?>"
            },
            personalId: {
                type: "<?= $e->escapeJs($configHelper->getCustomerDocumentType()) ?>",
                value: "<?= $e->escapeJs($order->getBillingAddress()->getData($configHelper->getCustomerAttributeForDocument())) ?>"
            },
            address: {
                street: "<?= $e->escapeJs($order->getBillingAddress()->getStreet()[0]) ?>",
                number: "<?= $e->escapeJs($order->getBillingAddress()->getStreet()[1] ?? 'none') ?>",
                floor: "<?= $e->escapeJs($order->getBillingAddress()->getStreet()[2] ?? 'none') ?>",
                apt: "<?= $e->escapeJs($order->getBillingAddress()->getStreet()[3] ?? 'none') ?>",
                city: "<?= $e->escapeJs($order->getBillingAddress()->getCity()) ?>",
                state: "<?= $e->escapeJs($order->getBillingAddress()->getRegion()) ?>",
                zipCode: "<?= $e->escapeJs($order->getBillingAddress()->getPostcode()) ?? '' ?>",
                country: "<?= $e->escapeJs($order->getBillingAddress()->getCountryId()) ?>",
                description: "Billing Address"
            }
        });
        checkout.setCardHolder({
            name: '<?= $e->escapeJs($order->getBillingAddress()->getFirstname() . ' ' . $order->getBillingAddress()->getLastname()) ?>',
            identification: {
                type: '<?= $e->escapeJs($configHelper->getCustomerDocumentType()) ?>',
                value: "<?= $e->escapeJs($order->getBillingAddress()->getData($configHelper->getCustomerAttributeForDocument())) ?>"
            },
        })
        checkout.setTransaction({prices: <?= /** @noEscape */json_encode($prices) ?>});
        let errorsMessage = $('.rebill-errors');
        checkout.setCallbacks({
            onSuccess: function (response) {
                errorsMessage.html('');
                if (response.invoice) {
                    $.ajax({
                        url: '<?= $e->escapeUrl($block->getUrl('rebill/payment/success', ['order_id' => $order->getId()])) ?>',
                        data: response,
                        type: 'post',
                        success: function () {
                            window.location.href = '<?= $e->escapeUrl($block->getUrl('checkout/onepage/success')) ?>';
                        }
                    });
                } else {
                    errorsMessage.append($('<div class="error-message"></div>')
                        .text("<?= $e->escapeJs(__('The payment can\'t be processed, try again with another card.')) ?>"));
                }
            },
            onError: function (error) {
                errorsMessage.html('')
                    .append($('<div class="error-message"></div>')
                    .text("<?= /** @noEscape  */ __('The payment can\'t be processed, try again with another card.') ?>"));
            },
        });
        checkout.setText({
            card_number: '<?= /** @noEscape  */ __('Card Number') ?>',
            pay_button: '<?= /** @noEscape  */ __('Pay') ?>',
            /*error_messages: {
                emptyCardNumber: '<?= /** @noEscape  */ __('Enter a card number') ?>',
                invalidCardNumber: '<?= /** @noEscape  */ __('Card number is invalid') ?>',
                emptyExpiryDate: '<?= /** @noEscape  */ __('Enter an expiry date') ?>',
                monthOutOfRange: '<?= /** @noEscape  */ __('Expiry month must be between 01 and 12') ?>',
                yearOutOfRange: '<?= /** @noEscape  */ __('Expiry year cannot be in the past') ?>',
                dateOutOfRange: '<?= /** @noEscape  */ __('Expiry date cannot be in the past') ?>',
                invalidExpiryDate: '<?= /** @noEscape  */ __('Expiry date is invalid') ?>',
                emptyCVC: '<?= /** @noEscape  */ __('Enter a CVC') ?>',
                invalidCVC: '<?= /** @noEscape  */ __('CVC is invalid') ?>',
            },*/
        });

        checkout.setElements('rebill_elements');
    });
</script>
